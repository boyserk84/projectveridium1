#summary One-sentence summary of this page.

= Iteration1 : =
- Displaying things on the screen. (View)
- Create a game structure and framework. (Controller)
- Create special data types for game. (Model)

= View Design Concept =

#1 Approach: Using adapter pattern.
For example, "Building" is a game object, which is a model.
We create an adapter called "sprite" to handle a view and representation of the building object. Sprite (adapter) will keep track of different representation of building such as tent, fortress, barrack. Each representation is basically either sprite (graphic) or movie clip object. What Sprite (adapter) does is to get information from "Building" object such as type of building (barrack vs. fortress etc...) then create an object that has an image reprenstation of the type of building (barrack vs. fortress). Then feed "Sprite" to View to process.

= Tasks =
||Task || Time spent || Description ||
|| Task A || || Construct SpriteSheet object to manage all image objects ||
|| Task B || || Integrate with Building and other game objects with View object ||
|| Task C || || View: Sort algorithm based on game (X,Y) coordinate ||
|| Task D || || View: display in the correct order after add and remove ||


#2 Approach: "Building", which is a game object, only keeps track of frame index corresponding to the spritesheet. Then feed this number to View. Then view creates an object called "sprite" or "spritesheet", which is to draw part of the entire spritesheet.


= Tasks =
||Task || Time spent || Description ||
|| Task A || || Draw part of image on moveclip ||
|| Task B || || Represent/Instantiate the same type of image object, but with different part of the image||
|| Task C || || Load external image as a spritesheet ||
|| Task D || || Moving the image object's location without mess up representational part of the image ||