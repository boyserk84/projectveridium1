#summary One-sentence summary of this page.
= Iteration2 =

- Integrating I/O input (event handler) to View

- Add and remove buildings to the actual game by mouse-clicking

- View of menu

- "WorldMap" and "City" are integrated into separate gamecanvas objects.


= Design: VIEW with I/O input =
The basic concept of integrating event handler or I/O input with the VIEW is to have an input from mouse-clicking, which is X and Y values of current mouse-pointer. From there, X and Y values are fed into a method in "VIEW". That method will determine which 'tile' is being clicked on and (X,Y) initial view position of the 'tile'. Thereafter, game object will decide if the 'tile' is being occupied. If it is available, then proceed to add buildings to the "city" object. Then update a list of buildings and feed into VIEW.

= Design: GameCanvas =
From this point, we decided to have 3 game canvas objects: city, worldmap and gameCanvas.
What "gameCanvas" is just a basic controller for "city" and "worldmap" canvas. Each canvas will hold game objects and representation for itself. For instance, "worldmap" will only hold a visualization of the worldmap, worldmap game objects, and how users would interact to it without dealing with "city". Meanwhile, "city" will do the same, but hold a visualization of the city in an isometric manner. With this approach, we think it suits actionscript and flash better and limit a scope of each game management/play.

= Tasks =

|| Tasks || Timespent || Description ||
|| Task A || || (View) Translate (X,Y) of mouseclicking to nth tile ||
|| Task B || || (View) Add a building into a city by mouse clicking ||
|| Task C || || Prevent adding a building into an occupied tile when click ||
|| Task D || || (View) Remove a building from a city by mouse clicking ||
|| Task E || || Highlight selected tile when mouse hover over or click ||
|| Task F || || Implement a complete event handler/MOUSE I/O listener ||